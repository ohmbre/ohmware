#!/bin/bash
remote_addr=ohmbre #10.0.0.3
arch=arm64
gccarch=aarch64
config=bcmrpi3_defconfig
dts_subdir=dts/broadcom
kernel=Image
upstream_tree=rpi-4.15.y
upstream_url=https://github.com/raspberrypi/linux.git
this_dir=$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )
blds_dir=$this_dir/builds
wrks_dir=$this_dir/.work
uppers_dir=$this_dir/.uppers
upstream_src_dir=$this_dir/$upstream_tree
src_dir=$this_dir/kernel
bld_dir=$blds_dir/kernel
sbld_dir=$blds_dir/os
wrk_dir=$wrks_dir/kernel
upper_dir=$uppers_dir/kernel
dist_dir=$this_dir/dist
ohmbase_dir=$this_dir/ohmbase

make="make"

make="$make INSTALL_PATH=$dist_dir/boot"
make="$make INSTALL_MOD_PATH=$dist_dir"
make="$make KBUILD_OUTPUT=$bld_dir"
make="$make ARCH=$arch"
make="$make CROSS_COMPILE=$this_dir/output/host/bin/$gccarch-ohm-linux-gnu-"
make="$make INITRD=No"
make="$make CCACHE_DIR=$build_dir/.ccache"
make="$make -C $src_dir"

set -e
shopt -s globstar

mkdir -p $dist_dir

setup() {   
    mkdir -p $src_dir
    mkdir -p $wrk_dir
    mkdir -p $blds_dir
    rm -rf $upper_dir
    mkdir -p $upper_dir
    if [ ! -d $upstream_src_dir ]; then
	git clone -b $upstream_tree $upstream_url $upstream_tree --depth=1
    fi

    umount $src_dir > /dev/null 2>&1 || /bin/true
    [[ $(findmnt -M "$src_dir") ]] || mount -t overlay overlay -o lowerdir=$this_dir/overlay:$upstream_src_dir,upperdir=$upper_dir,workdir=$wrk_dir $src_dir
    for f in $(find $src_dir -name \*.patch); do
	patch $(dirname $f)/$(basename $f .patch) $f
    done

    return 0
}

config() {
    echo "running with make command: $make"
    $make $config
    $make nconfig
    $make savedefconfig
    cp $bld_dir/defconfig $src_dir/arch/$arch/configs/$config
    echo "source directory is: $src_dir"
    cd $src_dir
    git diff arch/$arch/configs/$config > $this_dir/overlay/arch/$arch/configs/$config.patch
    cd $this_dir
    $make prepare
    return 0
}

build() {
    echo "building in $bld_dir ..."
    echo "running with make command: $make"
    $make -j10
    dtc -q -I dts -O dtb -o $bld_dir/arch/$arch/boot/$dts_subdir/dt-blob.bin $src_dir/arch/$arch/boot/$dts_subdir/dt-blob.dts
    version=`$make -f $bld_dir/Makefile kernelrelease 2> /dev/null`
    echo "built version $version"
    return 0
}

dist_modules() {
    echo "running with make command: $make"
    $make -j10 modules_install
    return 0
}

dist() {
    cp $bld_dir/arch/$arch/boot/$dts_subdir/ohmbre.dtb $dist_dir/boot/ohmbre.dtb
    cp $bld_dir/arch/$arch/boot/$dts_subdir/debug.dtb $dist_dir/boot/debug.dtb
    cp $bld_dir/arch/$arch/boot/$kernel $dist_dir/boot/ohmbre.img
    cp $src_dir/arch/$arch/boot/config.txt $dist_dir/boot/config.txt
    cp $src_dir/arch/$arch/boot/cmdline.txt $dist_dir/boot/cmdline.txt
    cp $bld_dir/arch/$arch/boot/$dts_subdir/dt-blob.bin $dist_dir/boot/dt-blob.bin
    
    return 0
}

firmware() {
    wget -O $dist_dir/boot/bootcode.bin https://raw.githubusercontent.com/raspberrypi/firmware/next/boot/bootcode.bin
    wget -O $dist_dir/boot/fixup.dat https://raw.githubusercontent.com/raspberrypi/firmware/next/boot/fixup.dat
    wget -O $dist_dir/boot/start.elf https://raw.githubusercontent.com/raspberrypi/firmware/next/boot/start.elf
}

sysmake="make BR2_DL_DIR=$sbld_dir/dl BR2_EXTERNAL=$ohmbase_dir --directory=$this_dir/buildroot O=$sbld_dir"

sysconfig() {
    echo "running with make command: $sysmake"
    $sysmake ohmbre_defconfig
    $sysmake nconfig
    $sysmake savedefconfig
}

system() {
    $sysmake
}

exportenv() {
    echo "WARNING: changing your env"
    export make=$make
    export sysmake=$sysmake
}

setup

do_sysconfig=false
do_system=false
do_config=false
do_build=false
do_dist=false
do_dist_modules=false
do_firmware=false
do_env=false

while getopts ":xscbdmfe" opt; do
    case ${opt} in
	x ) do_sysconfig=true;;
	s ) do_system=true;;
	c ) do_config=true;;
	b ) do_build=true;;
	d ) do_dist=true;;
	m ) do_dist_modules=true;;
	f ) do_firmware=true;;
	e ) do_env=true;;
    esac
done

if [ $do_sysconfig = true ]; then sysconfig; fi
if [ $do_system = true ]; then system; fi
if [ $do_config = true ]; then config; fi
if [ $do_build = true ]; then build; fi
if [ $do_dist = true ]; then dist; fi
if [ $do_dist_modules = true ]; then dist_modules; fi
if [ $do_firmware = true ]; then firmware; fi
if [ $do_env = true ]; then exportenv; fi

